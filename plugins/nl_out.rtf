{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red28\green0\blue207;\red0\green77\blue204;
\red0\green102\blue0;\red96\green96\blue96;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab480
\pard\tx480\pardeftab480\pardirnatural

\f0\fs18 \cf2 \CocoaLigature0 struct\cf0  Lorenz : \cf2 public\cf0  Unit \{\
	\cf2 double\cf0  x, y, z;\
\};\
\
\cf2 struct\cf0  Rossler : \cf2 public\cf0  Unit \{\
	\cf2 double\cf0  x, y, z;\
\};\
\
\cf2 struct\cf0  Langford : \cf2 public\cf0  Unit \{\
	\cf2 double\cf0  x, y, z;\
\};\
\
	\cf2 void\cf0  Lorenz_next(Lorenz *unit, \cf2 int\cf0  inNumSamples);\
	\cf2 void\cf0  Lorenz_Ctor(Lorenz *unit);\
	\cf2 void\cf0  Rossler_next(Rossler *unit, \cf2 int\cf0  inNumSamples);\
	\cf2 void\cf0  Rossler_Ctor(Rossler *unit);\
	\cf2 void\cf0  Langford_next(Langford *unit, \cf2 int\cf0  inNumSamples);\
	\cf2 void\cf0  Langford_Ctor(Langford *unit);\
\
\cf2 void\cf0  Lorenz_next(Lorenz *unit, \cf2 int\cf0  inNumSamples)\
\{\
	\cf2 float\cf0  *xout = ZOUT(\cf3 0\cf0 );\
	\cf2 float\cf0  *yout = ZOUT(\cf3 1\cf0 );\
	\cf2 float\cf0  *zout = ZOUT(\cf3 2\cf0 );\
	\
	\cf2 double\cf0  h = ZIN0(\cf3 0\cf0 );\
	\cf2 double\cf0  s = ZIN0(\cf3 1\cf0 );\
	\cf2 double\cf0  r = ZIN0(\cf3 2\cf0 );\
	\cf2 double\cf0  b = ZIN0(\cf3 3\cf0 );\
\
	\cf2 double\cf0  x = unit->x;\
	\cf2 double\cf0  y = unit->y;\
	\cf2 double\cf0  z = unit->z;\
\
	LOOP(inNumSamples,\
		x += h * s * (y - x);\
		y += h * (x * (r - z) - y);\
		z += h * (x * y - b * z);\
		ZXP(xout) = x * \cf3 0.02\cf0 ;\
		ZXP(yout) = y * \cf3 0.02\cf0 ;\
		ZXP(zout) = z * \cf3 0.01\cf0 ;\
	)\
	unit->x = x;\
	unit->y = y;\
	unit->z = z;\
\}\
\
\cf2 void\cf0  Lorenz_Ctor(Lorenz *unit)\
\{\
	SETCALC(Lorenz_next);\
	unit->x = IN0(\cf3 4\cf0 );\
	unit->y = IN0(\cf3 5\cf0 );\
	unit->y = IN0(\cf3 6\cf0 );\
	Lorenz_next(unit, \cf3 1\cf0 );\
\}\
\
\cf2 void\cf0  Rossler_next(Rossler *unit, \cf2 int\cf0  inNumSamples)\
\{\
	\cf2 float\cf0  *xout = ZOUT(\cf3 0\cf0 );\
	\cf2 float\cf0  *yout = ZOUT(\cf3 1\cf0 );\
	\cf2 float\cf0  *zout = ZOUT(\cf3 2\cf0 );\
\
	\cf2 double\cf0  h = ZIN0(\cf3 0\cf0 );\
	\cf2 double\cf0  a = ZIN0(\cf3 1\cf0 );\
	\cf2 double\cf0  b = ZIN0(\cf3 2\cf0 );\
	\cf2 double\cf0  c = ZIN0(\cf3 3\cf0 );\
		\
	\cf2 double\cf0  x = unit->x;\
	\cf2 double\cf0  y = unit->y;\
	\cf2 double\cf0  z = unit->z;\
	\
	LOOP(inNumSamples,\
		x += h * (-y - z);\
		y += h * (x + a * y);\
		z += h * (b + z * (x - c));\
		ZXP(xout) = x * \cf3 0.04\cf0 ;\
		ZXP(yout) = y * \cf3 0.04\cf0 ;\
		ZXP(zout) = z * \cf3 0.01\cf0 ;\
	)\
	unit->x = x;\
	unit->y = y;\
	unit->z = z;\
\}\
\
\cf2 void\cf0  Rossler_Ctor(Rossler *unit)\
\{\
	SETCALC(Rossler_next);\
	unit->x = IN0(\cf3 4\cf0 );\
	unit->y = IN0(\cf3 5\cf0 );\
	unit->y = IN0(\cf3 6\cf0 );\
	Rossler_next(unit, \cf3 1\cf0 );\
\}\
\
\cf2 void\cf0  Langford_next(Langford *unit, \cf2 int\cf0  inNumSamples)\
\{\
	\cf2 float\cf0  *xout = ZOUT(\cf3 0\cf0 );\
	\cf2 float\cf0  *yout = ZOUT(\cf3 1\cf0 );\
	\cf2 float\cf0  *zout = ZOUT(\cf3 2\cf0 );\
\
	\cf2 double\cf0  h = ZIN0(\cf3 0\cf0 );\
	\cf2 double\cf0  a = ZIN0(\cf3 1\cf0 );\
		\
	\cf2 double\cf0  x = unit->x;\
	\cf2 double\cf0  y = unit->y;\
	\cf2 double\cf0  z = unit->z;\
	\
	LOOP(inNumSamples,\
		x += h * ((z - \cf3 0.7\cf0 ) * x - \cf3 3.5\cf0  * y);\
		y += h * (\cf3 3.5\cf0  * x + (z - \cf3 0.7\cf0 ) * y);\
		z += h * (a + z - z*z*z*\cf3 0.33333\cf0  - (x*x + y*y) * (\cf3 1.0\cf0  + \cf3 0.25\cf0 *z));\
		ZXP(xout) = x * \cf3 0.5\cf0 ;\
		ZXP(yout) = y * \cf3 0.5\cf0 ;\
		ZXP(zout) = z * \cf3 0.5\cf0 ;\
	)\
	unit->x = x;\
	unit->y = y;\
	unit->z = z;\
\}\
\
\cf2 void\cf0  Langford_Ctor(Langford *unit)\
\{\
	SETCALC(Langford_next);\
	unit->x = IN0(\cf3 2\cf0 );\
	unit->y = IN0(\cf3 3\cf0 );\
	unit->y = IN0(\cf3 4\cf0 );\
	Langford_next(unit, \cf3 1\cf0 );\
\}\
\
	DefineSimpleUnit(Lorenz);\
	DefineSimpleUnit(Rossler);\
	DefineSimpleUnit(Langford);\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf4 \CocoaLigature1 Lorenz\cf0  : \cf4 NLMultiOutUGen\cf0  \{\
	*ar \{\cf4 | h=0.01, s=10, r=28, b=2.667, xi=1, yi=0, zi=0, mul=1, add=0 |\cf0 \
		^\cf4 this\cf0 .multiNew(\cf5 \\audio\cf0 , h, s, r, b, xi, yi, zi).madd(mul, add);\
	\}\
	init \{\cf4 | ... theInputs |\cf0 \
		inputs = theInputs;		\
		channels = \cf4 Array\cf0 .fill(\cf6 3\cf0 , \{\cf4 |i|\cf0  \cf4 OutputProxy\cf0 (rate, \cf4 this\cf0 , i) \});\
		^channels\
	\}\
\}\
\
\cf4 Rossler\cf0  : \cf4 NLMultiOutUGen\cf0  \{\
	*ar \{\cf4 | h=0.01, a=0.2, b=0.2, c=5.7, xi=1, yi=1, zi=1, mul=1, add=0 |\cf0 \
		^\cf4 this\cf0 .multiNew(\cf5 \\audio\cf0 , h, a, b, c, xi, yi, zi).madd(mul, add);\
	\}\
	init \{\cf4 | ... theInputs |\cf0 \
		inputs = theInputs;		\
		channels = \cf4 Array\cf0 .fill(\cf6 3\cf0 , \{\cf4 |i|\cf0  \cf4 OutputProxy\cf0 (rate, \cf4 this\cf0 , i) \});\
		^channels\
	\}\
\}\
\
\cf4 Langford\cf0  : \cf4 NLMultiOutUGen\cf0  \{\
	*ar \{\cf4 | h=0.01, a=0.6, xi=1, yi=1, zi=1, mul=1, add=0 |\cf0 \
		^\cf4 this\cf0 .multiNew(\cf5 \\audio\cf0 , h, a, xi, yi, zi).madd(mul, add);\
	\}\
	init \{\cf4 | ... theInputs |\cf0 \
		inputs = theInputs;		\
		channels = \cf4 Array\cf0 .fill(\cf6 3\cf0 , \{\cf4 |i|\cf0  \cf4 OutputProxy\cf0 (rate, \cf4 this\cf0 , i) \});\
		^channels\
	\}\
}